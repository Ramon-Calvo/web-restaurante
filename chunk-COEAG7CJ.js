import{N as l,a as o,b as d,fa as a}from"./chunk-RUVTLGDO.js";var m=class s{currentOrder=a(null);orderHistory=a([]);loading=a(!1);order=this.currentOrder.asReadonly();history=this.orderHistory.asReadonly();isLoading=this.loading.asReadonly();async createOrder(e,r,t,i){this.loading.set(!0);let n={id:this.generateOrderId(),userId:i,items:e.items,status:"pending",deliveryInfo:r,paymentInfo:t,subtotal:e.subtotal,tax:e.tax,deliveryFee:e.deliveryFee,total:e.total,createdAt:new Date,updatedAt:new Date,estimatedDeliveryTime:this.calculateEstimatedDeliveryTime()};return await this.simulateOrderCreation(n),this.currentOrder.set(n),this.orderHistory.update(u=>[n,...u]),this.loading.set(!1),n}async updateOrderStatus(e,r){if(this.loading.set(!0),await new Promise(t=>setTimeout(t,500)),this.orderHistory.update(t=>t.map(i=>i.id===e?d(o({},i),{status:r,updatedAt:new Date}):i)),this.currentOrder()?.id===e){let t=this.orderHistory().find(i=>i.id===e);t&&this.currentOrder.set(t)}this.loading.set(!1)}getOrderById(e){return this.orderHistory().find(r=>r.id===e)}getOrdersByUser(e){return this.orderHistory().filter(r=>r.userId===e)}async cancelOrder(e){await this.updateOrderStatus(e,"cancelled")}generateOrderId(){let e=Date.now().toString(36),r=Math.random().toString(36).substr(2,9);return`ORD-${e}-${r}`.toUpperCase()}calculateEstimatedDeliveryTime(){let e=new Date;return e.setMinutes(e.getMinutes()+30),e}async simulateOrderCreation(e){await new Promise(r=>setTimeout(r,1e3)),console.log("Order created:",e)}static \u0275fac=function(r){return new(r||s)};static \u0275prov=l({token:s,factory:s.\u0275fac,providedIn:"root"})};export{m as a};
